{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "This template deploys Remote Desktop Gateway (RDGW) instances in an autoscale group behind an ELB, and joins them to a domain.",
    "Parameters" :
    {
        "KeyPairName" :
        {
            "Description" : "Public/private key pairs allow you to securely connect to your instance after it launches",
            "Type" : "AWS::EC2::KeyPair::KeyName"
        },
        "AmiId" :
        {
            "Description" : "(Optional) AMI ID -- will supersede Lambda-based AMI lookup using AmiNameSearchString",
            "Type" : "String",
            "Default" : ""
        },
        "ForceUpdateToggle" :
        {
            "Description" : "A/B toggle that forces a change to a LaunchConfig property, triggering the AutoScale Update Policy",
            "Type" : "String",
            "Default" : "A",
            "AllowedValues" :
            [
                "A",
                "B"
            ]
        },
        "AmiNameSearchString" :
        {
            "Description" : "Search pattern to match against an AMI Name",
            "Type" : "String",
            "Default" : "Windows_Server-2016-English-Full-Base-*"
        },
        "InstanceType" :
        {
            "Description" : "Amazon EC2 instance type for the Remote Desktop Gateway Instance",
            "Type" : "String",
            "Default" : "t2.micro",
            "AllowedValues" :
            [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "t2.xlarge",
                "t2.2xlarge",
                "c5.large",
                "c5.xlarge",
                "m5.large",
                "m5.xlarge",
                "r4.large",
                "r4.xlarge"
            ]
        },
        "DesiredCapacity" :
        {
            "Description" : "The number of instances the autoscale group will spin up initially",
            "Type" : "String",
            "MinLength" : "1",
            "Default" : "1"
        },
        "MinCapacity" :
        {
            "Description" : "The minimum number of instances for the autoscale group",
            "Type" : "String",
            "MinLength" : "1",
            "Default" : "0"
        },
        "MaxCapacity" :
        {
            "Description" : "The maximum number of instances for the autoscale group",
            "Type" : "String",
            "MinLength" : "1",
            "Default" : "2"
        },
        "ScaleUpSchedule" :
        {
            "Description" : "(Optional) Scheduled Action in cron-format (UTC) to scale up to the Desired Capacity; ignored if empty or ScaleDownSchedule is unset (E.g. \"0 10 * * Mon-Fri\")",
            "Type" : "String",
            "Default" : ""
        },
        "ScaleDownSchedule" :
        {
            "Description" : "(Optional) Scheduled Action in cron-format (UTC) to scale down the number of instances; ignored if empty or ScaleUpSchedule is unset (E.g. \"0 0 * * *\")",
            "Type" : "String",
            "Default" : ""
        },
        "ScaleDownDesiredCapacity" :
        {
            "Description" : "(Optional) Desired number of instances during the Scale Down Scheduled Action; ignored if ScaleDownSchedule is unset",
            "Type" : "Number",
            "Default" : "1"
        },
        "RemoteAccessUserGroup" :
        {
            "Description" : "Domain group of users authorized to use the RDGW",
            "Type" : "String",
            "Default" : "Domain Admins",
            "MinLength" : "1"
        },
        "DomainDirectoryId" :
        {
            "Description" : "ID of the AWS Directory Service domain, e.g. d-xxxxxxxxxx",
            "Type" : "String",
            "AllowedPattern" : "d-[a-zA-Z0-9]{10}"
        },
        "DomainDnsName" :
        {
            "Description" : "Fully qualified domain name (FQDN) of the forest root domain e.g. example.com",
            "Type" : "String",
            "Default" : "example.com",
            "MinLength" : "3",
            "MaxLength" : "25",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "DomainNetbiosName" :
        {
            "Description" : "NetBIOS name of the domain (e.g. EXAMPLE)",
            "Type" : "String",
            "Default" : "EXAMPLE",
            "MinLength" : "1",
            "MaxLength" : "15",
            "AllowedPattern" : "[a-zA-Z0-9]+"
        },
        "PublicSubnetIDs" :
        {
            "Description" : "A list of Public subnet IDs to attach to the load balancer",
            "Type" : "List<AWS::EC2::Subnet::Id>"
        },
        "PrivateSubnetIDs" :
        {
            "Description" : "List of Private Subnet IDs where the RDGW instances will run",
            "Type" : "List<AWS::EC2::Subnet::Id>"
        },
        "SslCertificateName" :
        {
            "Description" : "The name (for IAM) or identifier (for ACM) of the SSL certificate to associate with the ELB -- the cert must already exist in the service",
            "Type" : "String"
        },
        "SslCertificateService" :
        {
            "Description" : "The service hosting the SSL certificate",
            "Type" : "String",
            "Default" : "ACM",
            "AllowedValues" :
            [
                "ACM",
                "IAM"
            ]
        },
        "VPC" :
        {
            "Description" : "VPC ID",
            "Type" : "AWS::EC2::VPC::Id"
        }
    },
    "Metadata" :
    {
        "AWS::CloudFormation::Interface" :
        {
            "ParameterGroups" :
            [
                {
                    "Label" :
                    {
                        "default" : "EC2 Instance Configuration"
                    },
                    "Parameters" :
                    [
                        "AmiNameSearchString",
                        "AmiId",
                        "InstanceType",
                        "KeyPairName",
                        "PrivateSubnetIDs"
                    ]
                },
                {
                    "Label" :
                    {
                        "default" : "RDGW Configuration"
                    },
                    "Parameters" :
                    [
                        "DomainDirectoryId",
                        "DomainDnsName",
                        "DomainNetbiosName",
                        "RemoteAccessUserGroup"
                    ]
                },
                {
                    "Label" :
                    {
                        "default" : "AutoScale Configuration"
                    },
                    "Parameters" :
                    [
                        "DesiredCapacity",
                        "MinCapacity",
                        "MaxCapacity",
                        "ScaleDownDesiredCapacity",
                        "ScaleDownSchedule",
                        "ScaleUpSchedule",
                        "ForceUpdateToggle"
                    ]
                },
                {
                    "Label" :
                    {
                        "default" : "ELB Configuration"
                    },
                    "Parameters" :
                    [
                        "SslCertificateName",
                        "SslCertificateService",
                        "PublicSubnetIDs"
                    ]
                },
                {   "Label" :
                    {
                        "default" : "Network Configuration"
                    },
                    "Parameters" :
                    [
                        "VPC"
                    ]
                }
            ],
            "ParameterLabels" :
            {
                "AmiNameSearchString" :
                {
                    "default" : "AMI Name Search Pattern"
                },
                "ScaleDownDesiredCapacity" :
                {
                    "default" : "Scale Down Desired Capacity"
                }
            }
        }
    },
    "Conditions" :
    {
        "UseACM" :
        {
            "Fn::Equals" : [ { "Ref" : "SslCertificateService" }, "ACM" ]
        },
        "UseAmiLookup" :
        {
            "Fn::Equals" : [ { "Ref" : "AmiId" }, "" ]
        },
        "UseScheduledAction" :
        {
            "Fn::And" :
            [
                { "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "ScaleUpSchedule" }, "" ] } ] },
                { "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "ScaleDownSchedule" }, "" ] } ] }
            ]
        }
    },
    "Mappings" :
    {
        "ShellCommandMap" :
        {
            "Fn::Transform" :
            {
                "Name" : "AWS::Include",
                "Parameters" :
                {
                    "Location" : "s3://app-chemistry/snippets/shell_command_map.snippet.yaml"
                }
            }
        },
        "InstanceTypeMap" :
        {
            "Fn::Transform" :
            {
                "Name" : "AWS::Include",
                "Parameters" :
                {
                    "Location" : "s3://app-chemistry/snippets/instance_type_map.snippet.yaml"
                }
            }
        }
    },
    "Resources" :
    {
        "AmiIdLookup" :
        {
            "Type" : "Custom::AmiIdLookup",
            "Condition" : "UseAmiLookup",
            "Properties" :
            {
                "ServiceToken" :
                { "Fn::Join" : [ ":", [
                    "arn:aws:lambda",
                    { "Ref" : "AWS::Region" },
                    { "Ref" : "AWS::AccountId" },
                    "function:cfn-look-up-ami-ids"
                ]]},
                "Region" : { "Ref" : "AWS::Region" },
                "AmiNameSearchString" : { "Ref" : "AmiNameSearchString" },
                "ForceUpdateToggle" : { "Ref" : "ForceUpdateToggle" }
            }
        },
        "Ec2IamInstanceProfile" :
        {
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties" :
            {
                "Path" : "/",
                "Roles" : [ { "Ref" : "Ec2IamRole" } ]
            }
        },
        "Ec2IamRole" :
        {
            "Type" : "AWS::IAM::Role",
            "Properties" :
            {
                "AssumeRolePolicyDocument" :
                {
                   "Version" : "2012-10-17",
                   "Statement" :
                   [ {
                      "Effect" : "Allow",
                      "Principal" :
                      {
                          "Service" : [ "ec2.amazonaws.com", "ssm.amazonaws.com" ]
                      },
                      "Action" : [ "sts:AssumeRole" ]
                   } ]
                },
                "Path" : "/"
            }
        },
        "Ec2IamRolePolicy" :
        {
            "Type" : "AWS::IAM::Policy",
            "Properties" :
            {
                "PolicyName" :
                { "Fn::Join" : [ "", [
                    "ra-rdgw-",
                    { "Ref" : "AWS::StackName" }
                ]]},
                "PolicyDocument" :
                {
                    "Version" : "2012-10-17",
                    "Statement" :
                    [
                        {
                            "Effect" : "Allow",
                            "Action" :
                            [
                                "ssm:DescribeAssociation",
                                "ssm:GetDeployablePatchSnapshotForInstance",
                                "ssm:GetDocument",
                                "ssm:ListAssociations",
                                "ssm:ListInstanceAssociations",
                                "ssm:PutInventory",
                                "ssm:UpdateAssociationStatus",
                                "ssm:UpdateInstanceAssociationStatus",
                                "ssm:UpdateInstanceInformation"
                            ],
                            "Resource" : "*"
                        },
                        {
                            "Effect" : "Allow",
                            "Action" :
                            [
                                "ec2messages:AcknowledgeMessage",
                                "ec2messages:DeleteMessage",
                                "ec2messages:FailMessage",
                                "ec2messages:GetEndpoint",
                                "ec2messages:GetMessages",
                                "ec2messages:SendReply"
                            ],
                            "Resource" : "*"
                        },
                        {
                            "Effect" : "Allow",
                            "Action" :
                            [
                                "cloudwatch:PutMetricData"
                            ],
                            "Resource" : "*"
                        },
                        {
                            "Effect" : "Allow",
                            "Action" :
                            [
                                "ec2:DescribeInstanceStatus"
                            ],
                            "Resource" : "*"
                        },
                        {
                            "Effect" : "Allow",
                            "Action" :
                            [
                                "ds:CreateComputer",
                                "ds:DescribeDirectories"
                            ],
                            "Resource" : "*"
                        },
                        {
                            "Effect" : "Allow",
                            "Action" :
                            [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:DescribeLogGroups",
                                "logs:DescribeLogStreams",
                                "logs:PutLogEvents"
                            ],
                            "Resource" : "*"
                        },
                        {
                            "Effect" : "Allow",
                            "Action" :
                            [
                                "s3:GetObject"
                            ],
                            "Resource" : "arn:aws:s3:::amazon-ssm-*"
                        },
                        {
                            "Effect" : "Allow",
                            "Action" :
                            [
                                "s3:ListBucket"
                            ],
                            "Resource" : "arn:aws:s3:::amazon-ssm-packages-*"
                        },
                        {
                            "Effect" : "Allow",
                            "Action" :
                            [
                                "autoscaling:DescribeAutoScalingInstances"
                            ],
                            "Resource" : "*"
                        },
                        {
                            "Effect" : "Allow",
                            "Action" :
                            [
                                "autoscaling:EnterStandby",
                                "autoscaling:ExitStandby"
                            ],
                            "Resource" : "*",
                            "Condition" :
                            {
                                "StringEquals" :
                                {
                                    "autoscaling:ResourceTag/aws:cloudformation:stack-id" :
                                    { "Ref" : "AWS::StackId" }
                                }
                            }
                        }
                    ]
                },
                "Roles" : [ { "Ref" : "Ec2IamRole" } ]
            }
        },
        "SsmAssociationCloudWatchMetrics" :
        {
            "Fn::Transform" :
            {
                "Name" : "AWS::Include",
                "Parameters" :
                {
                    "Location" : "s3://app-chemistry/snippets/ssm_cloudwatch_asg_memory_disk_c.snippet.yaml"
                }
            }
        },
        "SsmAssociationJoinDomain" :
        {
            "Fn::Transform" :
            {
                "Name" : "AWS::Include",
                "Parameters" :
                {
                    "Location" : "s3://app-chemistry/snippets/ssm_join_domain.snippet.yaml"
                }
            }
        },
        "ScaleUpScheduledAction" :
        {
            "Type" : "AWS::AutoScaling::ScheduledAction",
            "Condition" : "UseScheduledAction",
            "Properties" :
            {
                "AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
                "DesiredCapacity" : { "Ref" : "MaxCapacity" },
                "Recurrence" : { "Ref" : "ScaleUpSchedule" }
            }
        },
        "ScaleDownScheduledAction" :
        {
            "Type" : "AWS::AutoScaling::ScheduledAction",
            "Condition" : "UseScheduledAction",
            "Properties" :
            {
                "AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
                "DesiredCapacity" : { "Ref" : "ScaleDownDesiredCapacity" },
                "Recurrence" : { "Ref" : "ScaleDownSchedule" }
            }
        },
        "Ec2SecurityGroup" :
        {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" :
            {
                "GroupDescription" : "Enable RDGW access from the ELB",
                "VpcId" : { "Ref" : "VPC" },
                "Tags" :
                [
                    {
                        "Key" : "Name",
                        "Value" : { "Fn::Join" : ["", [
                            "ra-rdgw-ec2-",
                            { "Ref" : "AWS::StackName" }
                        ]]}
                    }
                ]
            }
        },
        "ElbToRdgwIngressTcp443" :
        {
            "Type" : "AWS::EC2::SecurityGroupIngress",
            "Properties" :
            {
                "GroupId" :  { "Ref" : "Ec2SecurityGroup" },
                "IpProtocol" : "tcp",
                "FromPort" : "443",
                "ToPort" : "443",
                "SourceSecurityGroupId" : { "Ref" : "ElbSecurityGroup" }
            }
        },
        "ElbSecurityGroup" :
        {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" :
            {
                "GroupDescription" : "Enable RDGW access from the Internet",
                "VpcId" : { "Ref" : "VPC" },
                "Tags" :
                [
                    {
                        "Key" : "Name",
                        "Value" : { "Fn::Join" : ["", [
                            "ra-rdgw-elb-",
                            { "Ref" : "AWS::StackName" }
                        ]]}
                    }
                ]
            }
        },
        "PublicToElbIngressTcp443" :
        {
            "Type" : "AWS::EC2::SecurityGroupIngress",
            "Properties" :
            {
                "GroupId" :  { "Ref" : "ElbSecurityGroup" },
                "IpProtocol" : "tcp",
                "FromPort" : "443",
                "ToPort" : "443",
                "CidrIp" : "0.0.0.0/0"
            }
        },
        "ElbToRdgwEgressTcp443" :
        {
            "Type" : "AWS::EC2::SecurityGroupEgress",
            "Properties" :
            {
                "GroupId" :  { "Ref" : "ElbSecurityGroup" },
                "IpProtocol" : "tcp",
                "FromPort" : "443",
                "ToPort" : "443",
                "DestinationSecurityGroupId" : { "Ref" : "Ec2SecurityGroup" }
            }
        },
        "ELB" :
        {
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties" :
            {
                "CrossZone" : "false",
                "HealthCheck" :
                {
                    "HealthyThreshold" : "5",
                    "Interval" : "60",
                    "Target" : "HTTPS:443/iisstart.htm",
                    "Timeout" : "5",
                    "UnhealthyThreshold" : "10"
                },
                "ConnectionSettings" :
                {
                    "IdleTimeout" : "900"
                },
                "ConnectionDrainingPolicy" :
                {
                    "Enabled" : "true",
                    "Timeout" : "1800"
                },
                "Listeners" :
                [
                    {
                        "InstancePort" : "443",
                        "InstanceProtocol" : "SSL",
                        "LoadBalancerPort" : "443",
                        "Protocol" : "SSL",
                        "SSLCertificateId" :
                        { "Fn::If" : [
                            "UseACM",
                            { "Fn::Join" : [ ":", [
                                "arn:aws:acm",
                                { "Ref" : "AWS::Region" },
                                { "Ref" : "AWS::AccountId" },
                                { "Fn::Join" : [ "", [
                                    "certificate/",
                                    { "Ref" : "SslCertificateName" }
                                ]]}
                            ]]},
                            { "Fn::Join" : [ "", [
                                "arn:aws:iam::",
                                { "Ref" : "AWS::AccountId" },
                                " :server-certificate/",
                                { "Ref" : "SslCertificateName" }
                            ]]}
                        ]}
                    }
                ],
                "Policies" : [],
                "Scheme" : "internet-facing",
                "SecurityGroups" : [ { "Ref" : "ElbSecurityGroup" } ],
                "Subnets" : { "Ref" : "PublicSubnetIDs" },
                "Tags" :
                [
                    {
                        "Key" : "Name",
                        "Value" : { "Ref" : "AWS::StackName" }
                    }
                ]
           }
        },
        "AutoScalingGroup" :
        {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "CreationPolicy" :
            {
                "ResourceSignal" :
                {
                    "Count" : { "Ref" : "DesiredCapacity" },
                    "Timeout" : "PT40M"
                }
            },
            "UpdatePolicy" :
            {
                "AutoScalingReplacingUpdate" : { "WillReplace" : "true" }
            },
            "Properties" :
            {
                "VPCZoneIdentifier" : { "Ref" : "PrivateSubnetIDs" },
                "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
                "LoadBalancerNames" : [ { "Ref" : "ELB" } ],
                "MinSize" : { "Ref" : "MinCapacity" },
                "MaxSize" : { "Ref" : "MaxCapacity" },
                "DesiredCapacity" : { "Ref" : "DesiredCapacity" },
                "HealthCheckGracePeriod" : "3600",
                "HealthCheckType" : "ELB",
                "MetricsCollection" : [ { "Granularity" : "1Minute" } ],
                "TerminationPolicies" : [ "OldestInstance", "Default" ],
                "Tags" :
                [
                    {
                        "Key" : "Name",
                        "Value" : { "Ref" : "AWS::StackName" },
                        "PropagateAtLaunch" : "true"
                    }
                ]
            }
        },
        "LaunchConfig" :
        {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Metadata" :
            {
                "AWS::CloudFormation::Init" :
                {
                    "configSets" :
                    {
                        "config" :
                        [
                            "join-domain",
                            "setup",
                            "set-standby",
                            "installRDS",
                            "set-active",
                            "finalize"
                        ],
                        "update" :
                        [
                            "set-standby",
                            "setup",
                            "set-active",
                            "finalize"
                        ]
                    },
                    "setup" :
                    {
                        "files" :
                        {
                            "c:\\cfn\\cfn-hup.conf" :
                            {
                                "content" :
                                { "Fn::Join" : [ "", [
                                    "[main]\n",
                                    "stack=", { "Ref" : "AWS::StackName" },
                                    "\n",
                                    "region=", { "Ref" : "AWS::Region" },
                                    "\n"
                                ]]}
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" :
                            {
                                "content" :
                                { "Fn::Join" : [ "", [
                                    "[cfn-auto-reloader-hook]\n",
                                    "triggers=post.update\n",
                                    "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                                    "action=cfn-init.exe -v -c update",
                                    " --stack ", { "Ref" : "AWS::StackName" },
                                    " --resource LaunchConfig ",
                                    " --region ", { "Ref" : "AWS::Region"}, "\n"
                                ]]}
                            },
                            "c:\\cfn\\scripts\\configure-rdgw.ps1" :
                            {
                                "source" : "https://raw.githubusercontent.com/plus3it/cfn/master/scripts/configure-rdgw.ps1"
                            }
                        },
                        "services" :
                        {
                            "windows" :
                            {
                                "cfn-hup" :
                                {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files" :
                                    [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "set-standby" :
                    {
                        "Fn::Transform" :
                        {
                            "Name" : "AWS::Include",
                            "Parameters" :
                            {
                                "Location" : "s3://app-chemistry/snippets/set_autoscaling_standby_win.snippet.yaml"
                            }
                        }
                    },
                    "set-active" :
                    {
                        "Fn::Transform" :
                        {
                            "Name" : "AWS::Include",
                            "Parameters" :
                            {
                                "Location" : "s3://app-chemistry/snippets/set_autoscaling_active_win.snippet.yaml"
                            }
                        }
                    },
                    "join-domain" :
                    {
                        "commands" :
                        {
                            "10-join-domain" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    { "Fn::FindInMap" :
                                        [
                                            "ShellCommandMap",
                                            "powershell",
                                            "command"
                                        ]
                                    },
                                    "-Command ",
                                    "Write-Verbose 'Waiting for SSM to complete domain join, which reboots the instance automatically' -Verbose"
                                ] ] },
                                "waitAfterCompletion" : "forever"
                            }
                        }
                    },
                    "installRDS" :
                    {
                        "commands" :
                        {
                            "10-install-rds" :
                            {
                                "command" : "powershell.exe \"Install-WindowsFeature RDS-Gateway,RSAT-RDS-Gateway -Verbose\"",
                                "waitAfterCompletion" : "0"
                            },
                            "20-configure-rdgw" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    "powershell.exe -ExecutionPolicy RemoteSigned",
                                    " C:\\cfn\\scripts\\configure-rdgw.ps1 ",
                                    " -DomainNetBiosName ", { "Ref" : "DomainNetbiosName" },
                                    " -GroupName ",
                                    "'",
                                    { "Ref" : "RemoteAccessUserGroup" },
                                    "'",
                                    " -Verbose"
                                ]]},
                                "waitAfterCompletion" : "0"
                            }
                        }
                    },
                    "finalize" :
                    {
                        "commands" :
                        {
                            "10-signal-success" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    "cfn-signal.exe -e 0",
                                    " --stack ", { "Ref" : "AWS::StackName" },
                                    " --resource AutoScalingGroup ",
                                    " --region ", { "Ref" : "AWS::Region"}
                                ]]},
                                "ignoreErrors" : "true",
                                "waitAfterCompletion" : "0"
                            }
                        }
                    }
                }
            },
            "Properties" :
            {
                "ImageId" :
                {
                    "Fn::If" :
                    [
                        "UseAmiLookup",
                        {"Fn::GetAtt" : [ "AmiIdLookup", "Id" ]},
                        {"Ref" : "AmiId"}
                    ]
                },
                "InstanceType" : { "Ref" : "InstanceType" },
                "KeyName" : { "Ref" : "KeyPairName" },
                "IamInstanceProfile" : { "Ref" : "Ec2IamInstanceProfile" },
                "EbsOptimized" :
                {
                    "Fn::FindInMap" :
                    [
                        "InstanceTypeMap",
                        { "Ref" : "InstanceType" },
                        "SupportsEbsOptimized"
                    ]
                },
                "BlockDeviceMappings" :
                [
                    {
                        "DeviceName" : "/dev/sda1",
                        "Ebs" :
                        {
                            "VolumeSize" : "50",
                            "VolumeType" : "gp2",
                            "DeleteOnTermination" : "true"
                        }
                    }
                ],
                "SecurityGroups" : [ { "Ref" : "Ec2SecurityGroup" } ],
                "UserData" :
                { "Fn::Base64" : { "Fn::Join" : [ "", [
                    "<script>\n",
                    "REM CFN LaunchConfig Update Toggle: ",
                    { "Ref" : "ForceUpdateToggle" },
                    "\n",
                    "cfn-init.exe -v -c config ",
                    "   --stack ", { "Ref" : "AWS::StackName" },
                    "   --resource LaunchConfig ",
                    "   --region ", { "Ref" : "AWS::Region"}, "\n",
                    "</script>\n"
                ]]}}
            }
        }
    },
    "Outputs" :
    {
        "LoadBalancerName" :
        {
            "Description" : "Name of the Elastic Load Balancer",
            "Value" : { "Ref" : "ELB" }
        },
        "LoadBalancerDns" :
        {
            "Description" : "DNS name for the ELB",
            "Value" : { "Fn::GetAtt" : [ "ELB", "DNSName" ] }
        },
        "Ec2SecurityGroupId" :
        {
            "Value" : { "Ref" : "Ec2SecurityGroup" },
            "Description" : "Security Group ID for RDGW EC2 instances"
        },
        "ElbSecurityGroupId" :
        {
            "Value" : { "Ref" : "ElbSecurityGroup" },
            "Description" : "Security Group ID for RDGW Elastic Load Balancer"
        }
    }
}
