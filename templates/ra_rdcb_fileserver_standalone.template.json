{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "This template deploys a Connection Broker (master) and a file server for home directories and profiles.",
    "Parameters" :
    {
        "KeyPairName" :
        {
            "Description" : "Public/private key pairs allow you to securely connect to your instance after it launches",
            "Type" : "AWS::EC2::KeyPair::KeyName"
        },
        "AmiId" :
        {
            "Description" : "(Optional) AMI ID -- will supersede Lambda-based AMI lookup using AmiNameSearchString",
            "Type" : "String",
            "Default" : ""
        },
        "AmiNameSearchString" :
        {
            "Description" : "Search pattern to match against an AMI Name",
            "Type" : "String",
            "Default" : "Windows_Server-2016-English-Full-Base-*"
        },
        "InstanceType" :
        {
            "Description" : "Amazon EC2 instance type for the Remote Desktop Session Instance",
            "Type" : "String",
            "Default" : "t2.medium",
            "AllowedValues" :
            [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "t2.xlarge",
                "c5.large",
                "c5.xlarge",
                "m5.large",
                "m5.xlarge",
                "r4.large",
                "r4.xlarge"
            ]
        },
        "NotificationEmail" :
        {
            "Description" : "(Optional) Email address to subscribe to notifications and alarms",
            "Type" : "String",
            "AllowedPattern" : "^$|.*[@].*"
        },
        "DomainDirectoryId" :
        {
            "Description" : "ID of the AWS Directory Service domain, e.g. d-xxxxxxxxxx",
            "Type" : "String",
            "AllowedPattern" : "d-[a-zA-Z0-9]{10}"
        },
        "DomainDnsName" :
        {
            "Description" : "Fully qualified domain name (FQDN) of the forest root domain, e.g. example.com",
            "Type" : "String",
            "Default" : "example.com",
            "MinLength" : "3",
            "MaxLength" : "25",
            "AllowedPattern" : "[a-zA-Z0-9-]+\\..+"
        },
        "DomainNetbiosName" :
        {
            "Description" : "NetBIOS name of the domain (e.g. EXAMPLE)",
            "Type" : "String",
            "Default" : "EXAMPLE",
            "MinLength" : "1",
            "MaxLength" : "15",
            "AllowedPattern" : "[a-zA-Z0-9]+"
        },
        "DomainAccessUserGroup" :
        {
            "Description" : "Domain group of users authorized to use the remote access solution",
            "Type" : "String",
            "Default" : "Domain Users",
            "MinLength" : "1"
        },
        "DataVolumeSize" :
        {
            "Description" : "Size of the data volume to attach to the instance",
            "Type" : "Number",
            "Default" : "5",
            "MinValue" : "1",
            "MaxValue" : "16384"
        },
        "DataVolumeSnapshotId" :
        {
            "Description" : "(Optional) Snapshot ID of an existing EBS volume. Leave blank to instantiate an empty volume",
            "Type" : "String",
            "Default" : "",
            "AllowedPattern" : "^$|snap-[a-zA-Z0-9]{8}|snap-[a-zA-Z0-9]{17}"
        },
        "NoPublicIp" :
        {
            "Description" : "Controls whether to assign the instances a public IP. Recommended to leave at \"true\" _unless_ launching in a public subnet",
            "Type" : "String",
            "Default" : "true",
            "AllowedValues" :
            [
                "false",
                "true"
            ]
        },
        "Ec2SubnetId" :
        {
            "Description" : "Private Subnet ID where the file server will run",
            "Type" : "AWS::EC2::Subnet::Id"
        },
        "Ec2SubnetAz" :
        {
            "Description" : "Availability zone of the private subnet",
            "Type" : "AWS::EC2::AvailabilityZone::Name"
        },
        "ExtraSecurityGroupIds" :
        {
            "Description" : "List of extra Security Group IDs to attach to the RDCB EC2 instance",
            "Type" : "List<AWS::EC2::SecurityGroup::Id>"
        },
        "SsmRdcbCredential" :
        {
            "Description" : "SSM Parameter Name for a SecureString containing the domain credential for the RDCB service account; SSM Parameter Value format is '@{Username = \"<user>\"; Password = \"<password>\"}'",
            "Type" : "String",
            "MinLength" : "1",
            "MaxLength" : "1024",
            "AllowedPattern" : "^(?!^([aA][wW][sS]|[sS][sS][mM]))(?=^[a-zA-Z0-9_./-]*$).*$"
        },
        "SsmKeyId" :
        {
            "Description" : "KMS Key ID used to encrypt/decrypt the SsmRdcbCredential",
            "Type" : "String",
            "AllowedPattern" : "^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$"
        },
        "VpcId" :
        {
            "Description" : "VPC ID",
            "Type" : "AWS::EC2::VPC::Id"
        }
    },
    "Metadata" :
    {
        "AWS::CloudFormation::Interface" :
        {
            "ParameterGroups" :
            [
                {
                    "Label" :
                    {
                        "default" : "EC2 Instance Configuration"
                    },
                    "Parameters" :
                    [
                        "AmiNameSearchString",
                        "AmiId",
                        "InstanceType",
                        "KeyPairName",
                        "DataVolumeSnapshotId",
                        "DataVolumeSize",
                        "ExtraSecurityGroupIds"
                    ]
                },
                {
                    "Label" :
                    {
                        "default" : "RDCB Application Configuration"
                    },
                    "Parameters" :
                    [
                        "DomainDirectoryId",
                        "DomainDnsName",
                        "DomainNetbiosName",
                        "DomainAccessUserGroup",
                        "RdClientAccessName",
                        "SsmKeyId",
                        "SsmRdcbCredential"
                    ]
                },
                {   "Label" :
                    {
                        "default" : "Network Configuration"
                    },
                    "Parameters" :
                    [
                        "VpcId",
                        "Ec2SubnetAz",
                        "Ec2SubnetId",
                        "NoPublicIp"
                    ]
                },
                {   "Label" :
                    {
                        "default" : "Management Configuration"
                    },
                    "Parameters" :
                    [
                        "NotificationEmail"
                    ]
                }
            ],
            "ParameterLabels" :
            {
                "AmiNameSearchString" :
                {
                    "default" : "AMI Name Search Pattern"
                }
            }
        }
    },
    "Conditions" :
    {
        "AssignPublicIp" :
        {
            "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "NoPublicIp" }, "true" ] } ]
        },
        "CreateSnsSubscription" :
        {
            "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "NotificationEmail" }, "" ] } ]
        },
        "UseAmiLookup" :
        {
            "Fn::Equals" : [ { "Ref" : "AmiId" }, "" ]
        },
        "UseVolumeSnapshot" :
        {
            "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "DataVolumeSnapshotId" }, "" ] } ]
        }
    },
    "Mappings" :
    {
        "ShellCommandMap" :
        {
            "Fn::Transform" :
            {
                "Name" : "AWS::Include",
                "Parameters" :
                {
                    "Location" : "s3://app-chemistry/snippets/shell_command_map.snippet.yaml"
                }
            }
        },
        "InstanceTypeMap" :
        {
            "Fn::Transform" :
            {
                "Name" : "AWS::Include",
                "Parameters" :
                {
                    "Location" : "s3://app-chemistry/snippets/instance_type_map.snippet.yaml"
                }
            }
        }
    },
    "Resources" :
    {
        "AmiIdLookup" :
        {
            "Type" : "Custom::AmiIdLookup",
            "Condition" : "UseAmiLookup",
            "Properties" :
            {
                "ServiceToken" :
                { "Fn::Join" : [ ":", [
                    "arn:aws:lambda",
                    { "Ref" : "AWS::Region" },
                    { "Ref" : "AWS::AccountId" },
                    "function:cfn-look-up-ami-ids"
                ]]},
                "Region" : { "Ref" : "AWS::Region" },
                "AmiNameSearchString" : { "Ref" : "AmiNameSearchString" }
            }
        },
        "RdcbEc2SecurityGroup" :
        {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" :
            {
                "GroupDescription" : "Logical container for an RDCB EC2 instance",
                "VpcId" : { "Ref" : "VpcId" },
                "Tags" :
                [
                    {
                        "Key" : "Name",
                        "Value" :
                        { "Fn::Join" : [ "", [
                            "rdcb-ec2-",
                            { "Ref" : "AWS::StackName" }
                        ]]}
                    }
                ]
            }
        },
        "Ec2SelfIngressAll" :
        {
            "Type" : "AWS::EC2::SecurityGroupIngress",
            "Properties" :
            {
                "GroupId" : { "Ref" : "RdcbEc2SecurityGroup" },
                "IpProtocol" : "-1",
                "SourceSecurityGroupId" : { "Ref" : "RdcbEc2SecurityGroup" }
            }
        },
        "DataVolume" :
        {
           "Type" : "AWS::EC2::Volume",
           "DeletionPolicy" : "Snapshot",
           "Properties" :
           {
              "AvailabilityZone" : { "Ref" : "Ec2SubnetAz" },
              "Size" : { "Ref" : "DataVolumeSize" },
              "SnapshotId" :
              {
                  "Fn::If" :
                  [
                      "UseVolumeSnapshot",
                      { "Ref" : "DataVolumeSnapshotId" },
                      { "Ref" : "AWS::NoValue" }
                  ]
              },
              "VolumeType" : "gp2",
              "Tags" :
              [
                  {
                      "Key" : "Name",
                      "Value" : { "Ref" : "AWS::StackName" }
                  },
                  {
                      "Key" : "Consistency Group",
                      "Value" : "BackupGroup01"
                  }
              ]
           }
        },
        "Ec2IamInstanceProfile" :
        {
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties" :
            {
                "Path" : "/",
                "Roles" : [ { "Ref" : "Ec2IamRole" } ]
            }
        },
        "Ec2IamRole" :
        {
            "Type" : "AWS::IAM::Role",
            "Properties" :
            {
                "AssumeRolePolicyDocument" :
                {
                   "Version" : "2012-10-17",
                   "Statement" :
                   [ {
                      "Effect" : "Allow",
                      "Principal" :
                      {
                          "Service" : [ "ec2.amazonaws.com", "ssm.amazonaws.com" ]
                      },
                      "Action" : [ "sts:AssumeRole" ]
                   } ]
                },
                "ManagedPolicyArns" :
                [
                    "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
                ],
                "Path" : "/"
            }
        },
        "Ec2IamRolePolicy" :
        {
            "Type" : "AWS::IAM::Policy",
            "Properties" :
            {
                "PolicyName" :
                { "Fn::Join" : [ "", [
                    "rdcb-ec2-",
                    { "Ref" : "AWS::StackName" }
                ]]},
                "PolicyDocument" :
                {
                    "Version" : "2012-10-17",
                    "Statement" :
                    [
                        {
                            "Sid" : "AllowRestrictedSnapshotActions",
                            "Effect" : "Allow",
                            "Action" :
                            [
                                "ec2:CreateTags"
                            ],
                            "Resource" : "*",
                            "Condition" :
                            {
                                "StringLike":
                                {
                                    "ec2:ParentVolume" :
                                    { "Fn::Join" : [ "", [
                                        "arn:aws:ec2:",
                                        { "Ref" : "AWS::Region" },
                                        ":*:volume/",
                                        { "Ref" : "DataVolume" }
                                    ] ] }
                                }
                            }
                        },
                        {
                            "Sid" : "AllowSnapshotActions",
                            "Effect" : "Allow",
                            "Action" :
                            [
                                "ec2:CreateSnapshot",
                                "ec2:DeleteSnapshot",
                                "ec2:DescribeSnapshots",
                                "ec2:DescribeVolumes"
                            ],
                            "Resource" : "*"
                        },
                        {
                            "Sid" : "AllowSsmGetParameters",
                            "Effect" : "Allow",
                            "Action" :
                            [
                                "ssm:GetParameters"
                            ],
                            "Resource" :
                            [
                                { "Fn::Join" : [ "", [
                                    "arn:aws:ssm:*:*:parameter/",
                                    { "Ref" : "SsmRdcbCredential" }
                                ] ] }
                            ]
                        },
                        {
                            "Sid" : "AllowKmsDecrypt",
                            "Effect" : "Allow",
                            "Action" :
                            [
                                "kms:Decrypt"
                            ],
                            "Resource" :
                            [
                                { "Fn::Join" : [ "", [
                                    "arn:aws:kms:*:*:key/",
                                    { "Ref" : "SsmKeyId" }
                                ] ] }
                            ]
                        }
                    ]
                },
                "Roles" : [ { "Ref" : "Ec2IamRole" } ]
            }
        },
        "SsmAssociationCloudWatchMetrics" :
        {
            "Fn::Transform" :
            {
                "Name" : "AWS::Include",
                "Parameters" :
                {
                    "Location" : "s3://app-chemistry/snippets/ssm_cloudwatch_instance_memory_disk_c_d.snippet.yaml"
                }
            }
        },
        "RdCbFileServerInstance" :
        {
            "Type" : "AWS::EC2::Instance",
            "CreationPolicy" :
            {
                "ResourceSignal" :
                {
                    "Count" : "1",
                    "Timeout" : "PT60M"
                }
            },
            "Metadata" :
            {
                "AWS::CloudFormation::Init" :
                {
                    "configSets" :
                    {
                        "launch" :
                        [
                            "join-domain",
                            "cfnsetup",
                            "install-roles",
                            "reboot",
                            "configure-fileshares",
                            "configure-backups",
                            "configure-admins",
                            "configure-rdcb",
                            "reboot",
                            "finalize"
                        ],
                        "update" :
                        [
                            "cfnsetup",
                            "finalize"
                        ]
                    },
                    "cfnsetup" :
                    {
                        "files" :
                        {
                            "c:\\cfn\\cfn-hup.conf" :
                            {
                                "content" :
                                { "Fn::Join" : [ "", [
                                    "[main]\n",
                                    "stack=", { "Ref" : "AWS::StackId" }, "\n",
                                    "region=", { "Ref" : "AWS::Region" }, "\n",
                                    "interval=1", "\n",
                                    "verbose=true", "\n"
                                ] ] }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" :
                            {
                                "content" :
                                { "Fn::Join" : [ "", [
                                    "[cfn-auto-reloader-hook]\n",
                                    "triggers=post.update\n",
                                    "path=Resources.RdCbFileServerInstance.Metadata\n",
                                    "action=cfn-init.exe -v -c update",
                                    " --stack ", { "Ref" : "AWS::StackName" },
                                    " --resource RdCbFileServerInstance",
                                    " --region ", { "Ref" : "AWS::Region" }, "\n"
                                ] ] }
                            },
                            "c:\\cfn\\scripts\\snap-by-group.ps1" :
                            {
                                "source" : "https://raw.githubusercontent.com/plus3it/WinEBSbackups/master/SnapByCgroup.ps1"
                            },
                            "c:\\cfn\\scripts\\snap-maintenance.ps1" :
                            {
                                "source" : "https://raw.githubusercontent.com/plus3it/WinEBSbackups/master/SnapMaint.ps1"
                            },
                            "c:\\cfn\\scripts\\configure-fileshares.ps1" :
                            {
                                "source" : "https://raw.githubusercontent.com/plus3it/cfn/master/scripts/configure-fileshares.ps1"
                            },
                            "c:\\cfn\\scripts\\configure-ebsbackups.ps1" :
                            {
                                "source" : "https://raw.githubusercontent.com/plus3it/cfn/master/scripts/configure-ebsbackups.ps1"
                            },
                            "c:\\cfn\\scripts\\configure-rdcb.ps1" :
                            {
                                "source" : "https://raw.githubusercontent.com/plus3it/cfn/master/scripts/configure-rdcb.ps1"
                            },
                            "c:\\cfn\\scripts\\unzip-archive.ps1" :
                            {
                                "source" : "https://raw.githubusercontent.com/plus3it/cfn/master/scripts/unzip-archive.ps1"
                            },
                            "c:\\cfn\\files\\pstools.zip" :
                            {
                                "source" : "https://download.sysinternals.com/files/PSTools.zip"
                            }
                        },
                        "services" :
                        {
                            "windows" :
                            {
                                "cfn-hup" :
                                {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files" :
                                    [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        },
                        "commands" :
                        {
                            "a-set-execution-policy" :
                            {
                                "command" : "powershell.exe -command Set-ExecutionPolicy RemoteSigned -Force",
                                "waitAfterCompletion" : "0"
                            },
                            "b-online-disks" :
                            {
                                "command" : "powershell.exe \"foreach ($disk in (Get-CimInstance -ClassName Win32_DiskDrive)) { Set-Disk -Number $disk.Index -IsOffline $false }\"",
                                "waitAfterCompletion" : "0",
                                "ignoreErrors" : "true"
                            },
                            "c-initialize-disks" :
                            {
                                "command" : "powershell.exe C:\\ProgramData\\Amazon\\EC2-Windows\\Launch\\Scripts\\InitializeDisks.ps1",
                                "waitAfterCompletion" : "0",
                                "ignoreErrors" : "true"
                            },
                            "d-unzip-pstools" :
                            {
                                "command" : "powershell.exe c:\\cfn\\scripts\\unzip-archive.ps1 c:\\cfn\\files\\pstools.zip c:\\cfn\\files\\pstools",
                                "waitAfterCompletion" : "0",
                                "ignoreErrors" : "true"
                            }
                        }
                    },
                    "reboot" :
                    {
                        "commands" :
                        {
                            "10-reboot" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    { "Fn::FindInMap" :
                                        [
                                            "ShellCommandMap",
                                            "powershell",
                                            "command"
                                        ]
                                    },
                                    " \"Restart-Computer -Force -Verbose\""
                                ] ] },
                                "waitAfterCompletion" : "forever"
                            }
                        }
                    },
                    "join-domain" :
                    {
                        "commands" :
                        {
                            "10-join-domain" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    { "Fn::FindInMap" :
                                        [
                                            "ShellCommandMap",
                                            "powershell",
                                            "command"
                                        ]
                                    },
                                    "-Command ",
                                    "Write-Verbose 'Waiting for SSM to complete domain join, which reboots the instance automatically' -Verbose"
                                ] ] },
                                "waitAfterCompletion" : "forever"
                            }
                        }
                    },
                    "install-roles" :
                    {
                        "commands" :
                        {
                            "10-install-roles" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    { "Fn::FindInMap" :
                                        [
                                            "ShellCommandMap",
                                            "powershell",
                                            "command"
                                        ]
                                    },
                                    "-Command ",
                                    "\"",
                                    "Install-WindowsFeature FS-FileServer,RDS-Connection-Broker,RDS-RD-Server,RDS-Licensing,RDS-Licensing-UI -Verbose",
                                    "\""
                                ] ] },
                                "waitAfterCompletion" : "0"
                            }
                        }
                    },
                    "configure-fileshares" :
                    {
                        "commands" :
                        {
                            "10-create-upd-folder" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    { "Fn::FindInMap" :
                                        [
                                            "ShellCommandMap",
                                            "powershell",
                                            "command"
                                        ]
                                    },
                                    "-Command \"",
                                    "New-Item -ItemType directory -Path 'D:\\Shares\\Profiles$' -Force ",
                                    "-Verbose -ErrorAction Stop",
                                    "\""
                                ] ] },
                                "waitAfterCompletion" : "0"
                            },
                            "20-configure-fileshares" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    { "Fn::FindInMap" :
                                        [
                                            "ShellCommandMap",
                                            "powershell",
                                            "command"
                                        ]
                                    },
                                    "c:\\cfn\\scripts\\configure-fileshares.ps1",
                                    " -DomainNetbiosName '",
                                    { "Ref" : "DomainNetbiosName" },
                                    "' -GroupName '",
                                    { "Ref" : "DomainAccessUserGroup" },
                                    "' -Verbose -ErrorAction Stop"
                                ] ] },
                                "waitAfterCompletion" : "0"
                            }
                        }
                    },
                    "configure-backups" :
                    {
                        "commands" :
                        {
                            "10-configure-backups" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    { "Fn::FindInMap" :
                                        [
                                            "ShellCommandMap",
                                            "powershell",
                                            "command"
                                        ]
                                    },
                                    "c:\\cfn\\scripts\\configure-ebsbackups.ps1",
                                    " -SnapshotScript 'C:\\cfn\\scripts\\snap-by-group.ps1'",
                                    " -MaintenanceScript 'C:\\cfn\\scripts\\snap-maintenance.ps1'",
                                    " -ConsistencyGroup 'BackupGroup01'",
                                    " -Verbose -ErrorAction Stop"
                                ] ] },
                                "waitAfterCompletion" : "0"
                            }
                        }
                    },
                    "configure-admins" :
                    {
                        "commands" :
                        {
                            "10-configure-admins" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    { "Fn::FindInMap" :
                                        [
                                            "ShellCommandMap",
                                            "powershell",
                                            "command"
                                        ]
                                    },
                                    "-Command \"",
                                    "Invoke-Command -ScriptBlock {",
                                    "$ErrorActionPreference = 'Stop'; ",
                                    "Import-Module RemoteDesktop,RemoteDesktopServices; ",
                                    "$admin = (Invoke-Expression ((Get-SSMParameterValue -Name '",
                                    { "Ref" : "SsmRdcbCredential" },
                                    "' -WithDecryption $true).Parameters | ? {$_.Name -eq '",
                                    { "Ref" : "SsmRdcbCredential" },
                                    "' }).Value).Username + '@",
                                    { "Ref" : "DomainNetbiosName" },
                                    "'; ",
                                    "if (-not ($admin -in [Microsoft.TerminalServices.PSEngine.UserGroupHelper]::ListMembers('Administrators'))) { ",
                                    "[Microsoft.TerminalServices.PSEngine.UserGroupHelper]::AddMember('Administrators', $admin); ",
                                    "} } -Verbose -ErrorAction Stop",
                                    "\""
                                ] ] },
                                "waitAfterCompletion" : "0"
                            }
                        }
                    },
                    "configure-rdcb" :
                    {
                        "commands" :
                        {
                            "20-configure-rdcb" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    { "Fn::FindInMap" :
                                        [
                                            "ShellCommandMap",
                                            "powershell",
                                            "command"
                                        ]
                                    },
                                    "-Command \"",
                                    { "Fn::FindInMap" :
                                        [
                                            "ShellCommandMap",
                                            "psexec",
                                            "command"
                                        ]
                                    },
                                    " -u \\\"",
                                    { "Ref" : "DomainNetbiosName" }, "\\",
                                    "$((Invoke-Expression ((Get-SSMParameterValue -Name '",
                                    { "Ref" : "SsmRdcbCredential" },
                                    "' -WithDecryption $true).Parameters ^| ? {$_.Name -eq '",
                                    { "Ref" : "SsmRdcbCredential" },
                                    "' }).Value).Username)",
                                    "\\\" -p \\\"",
                                    "$((Invoke-Expression ((Get-SSMParameterValue -Name '",
                                    { "Ref" : "SsmRdcbCredential" },
                                    "' -WithDecryption $true).Parameters ^| ? {$_.Name -eq '",
                                    { "Ref" : "SsmRdcbCredential" },
                                    "' }).Value).Password)",
                                    "\\\" ",
                                    { "Fn::FindInMap" :
                                        [
                                            "ShellCommandMap",
                                            "powershell",
                                            "command"
                                        ]
                                    },
                                    "c:\\cfn\\scripts\\configure-rdcb.ps1 ",
                                    "-Verbose -ErrorAction Stop",
                                    "\""
                                ] ] },
                                "waitAfterCompletion" : "0"
                            }
                        }
                    },
                    "finalize" :
                    {
                        "commands" :
                        {
                            "10-signal-success" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    "cfn-signal.exe -e 0",
                                    " --stack ", { "Ref" : "AWS::StackName" },
                                    " --resource RdCbFileServerInstance",
                                    " --region ", { "Ref" : "AWS::Region"}, "\n"
                                ]]},
                                "ignoreErrors" : "true",
                                "waitAfterCompletion" : "0"
                            }
                        }
                    }
                }
            },
            "Properties" :
            {
                "ImageId" :
                {
                    "Fn::If" :
                    [
                        "UseAmiLookup",
                        {"Fn::GetAtt" : [ "AmiIdLookup", "Id" ]},
                        {"Ref" : "AmiId"}
                    ]
                },
                "InstanceType" : { "Ref" : "InstanceType" },
                "DisableApiTermination" : "true",
                "Monitoring" : "true",
                "KeyName" : { "Ref" : "KeyPairName" },
                "IamInstanceProfile" : { "Ref" : "Ec2IamInstanceProfile" },
                "EbsOptimized" :
                {
                    "Fn::FindInMap" :
                    [
                        "InstanceTypeMap",
                        { "Ref" : "InstanceType" },
                        "SupportsEbsOptimized"
                    ]
                },
                "BlockDeviceMappings" :
                [
                    {
                        "DeviceName" : "/dev/sda1",
                        "Ebs" :
                        {
                            "VolumeSize" : "50",
                            "VolumeType" : "gp2",
                            "DeleteOnTermination" : "true"
                        }
                    }
                ],
                "Volumes" :
                [
                    {
                        "Device" : "/dev/xvdf",
                        "VolumeId" : { "Ref" : "DataVolume" }
                    }
                ],
                "NetworkInterfaces" :
                [
                    {
                        "DeviceIndex" : 0,
                        "AssociatePublicIpAddress" :
                        {
                            "Fn::If" :
                            [
                                "AssignPublicIp",
                                "true",
                                "false"
                            ]
                        },
                        "DeleteOnTermination" : "true",
                        "SubnetId" : { "Ref" : "Ec2SubnetId" },
                        "GroupSet" :
                        { "Fn::Split" : [ ",",
                            { "Fn::Join" : [ ",", [
                                { "Ref" : "RdcbEc2SecurityGroup" },
                                { "Fn::Join" : [ ",",
                                    { "Ref" : "ExtraSecurityGroupIds" }
                                ]}
                            ]]}
                        ]}
                    }
                ],
                "SsmAssociations" :
                [ {
                    "DocumentName" :
                    { "Fn::Join" : [ "", [
                        "awsconfig_Domain_",
                        { "Ref" : "DomainDirectoryId" },
                        "_",
                        { "Ref" : "DomainDnsName" }
                    ] ] }
                } ],
                "Tags" :
                [
                    {
                        "Key" : "Name",
                        "Value" : { "Ref" : "AWS::StackName" }
                    }
                ],
                "UserData" :
                { "Fn::Base64" : { "Fn::Join" : [ "", [
                    "<script>", "\n",

                    "cfn-init.exe -v -c launch",
                    " --stack ", { "Ref" : "AWS::StackName" },
                    " --resource RdCbFileServerInstance ",
                    " --region ", { "Ref" : "AWS::Region" }, "\n",

                    "if %ERRORLEVEL% equ 0 goto success\n\n",

                    " :error\n",
                    "cfn-signal.exe -e 1",
                    " --stack ", { "Ref" : "AWS::StackName" },
                    " --resource RdCbFileServerInstance ",
                    " --region ", { "Ref" : "AWS::Region" }, "\n",
                    "echo \"ERROR: cfn-init failed! Aborting!\"", "\n",
                    "exit /b 1\n\n",

                    " :success\n",

                    "</script>"
                ] ] } }
            }
        },
        "SnsTopic" :
        {
            "Type" : "AWS::SNS::Topic"
        },
        "SnsSubscriptionEmail" :
        {
            "Type" : "AWS::SNS::Subscription",
            "Condition" : "CreateSnsSubscription",
            "Properties" :
            {
                "Endpoint" : { "Ref" : "NotificationEmail" },
                "Protocol" : "email",
                "TopicArn" : { "Ref" : "SnsTopic" }
            }
        },
        "Ec2RecoveryAlarm" :
        {
            "Type" : "AWS::CloudWatch::Alarm",
            "Properties" :
            {
                "AlarmDescription" : "Trigger a recovery when instance status check fails for 15 consecutive minutes",
                "Namespace" : "AWS/EC2" ,
                "MetricName" : "StatusCheckFailed_System",
                "Statistic" : "Minimum",
                "Period" : "60",
                "EvaluationPeriods" : "15",
                "ComparisonOperator" : "GreaterThanThreshold",
                "Threshold" : "0",
                "AlarmActions" :
                [ { "Fn::Join" : [ "", [
                    "arn:aws:automate:",
                    { "Ref" : "AWS::Region" },
                    ":ec2:recover"
                ] ] } ],
                "Dimensions" :
                [ {
                    "Name" : "InstanceId",
                    "Value": { "Ref" : "RdCbFileServerInstance" }
                } ]
            }
        },
        "Ec2LowDiskSpaceAlarm40C" :
        {
            "Type" : "AWS::CloudWatch::Alarm",
            "Properties" :
            {
                "AlarmActions" : [ { "Ref" : "SnsTopic" } ],
                "AlarmDescription" : "Trigger alarm when C: volume has less than 40% free disk space",
                "ComparisonOperator" : "LessThanThreshold",
                "Dimensions" :
                [ {
                    "Name" : "InstanceId",
                    "Value" : { "Ref" : "RdCbFileServerInstance" }
                } ],
                "EvaluationPeriods" : "5",
                "MetricName" : "LogicalDiskPercentFreeSpace_C",
                "Namespace" : "AWS/EC2",
                "Period" : "60",
                "Statistic" : "Average",
                "Threshold" : "40"
            }
        },
        "Ec2LowDiskSpaceAlarm20C" :
        {
            "Type" : "AWS::CloudWatch::Alarm",
            "Properties" :
            {
                "AlarmActions" : [ { "Ref" : "SnsTopic" } ],
                "AlarmDescription" : "Trigger alarm when C: volume has less than 20% free disk space",
                "ComparisonOperator" : "LessThanThreshold",
                "Dimensions" :
                [ {
                    "Name" : "InstanceId",
                    "Value" : { "Ref" : "RdCbFileServerInstance" }
                } ],
                "EvaluationPeriods" : "5",
                "MetricName" : "LogicalDiskPercentFreeSpace_C",
                "Namespace" : "AWS/EC2",
                "Period" : "60",
                "Statistic" : "Average",
                "Threshold" : "20"
            }
        },
        "Ec2LowDiskSpaceAlarm40D" :
        {
            "Type" : "AWS::CloudWatch::Alarm",
            "Properties" :
            {
                "AlarmActions" : [ { "Ref" : "SnsTopic" } ],
                "AlarmDescription" : "Trigger alarm when D: volume has less than 40% free disk space",
                "ComparisonOperator" : "LessThanThreshold",
                "Dimensions" :
                [ {
                    "Name" : "InstanceId",
                    "Value" : { "Ref" : "RdCbFileServerInstance" }
                } ],
                "EvaluationPeriods" : "5",
                "MetricName" : "LogicalDiskPercentFreeSpace_D",
                "Namespace" : "AWS/EC2",
                "Period" : "60",
                "Statistic" : "Average",
                "Threshold" : "40"
            }
        },
        "Ec2LowDiskSpaceAlarm20D" :
        {
            "Type" : "AWS::CloudWatch::Alarm",
            "Properties" :
            {
                "AlarmActions" : [ { "Ref" : "SnsTopic" } ],
                "AlarmDescription" : "Trigger alarm when D: volume has less than 20% free disk space",
                "ComparisonOperator" : "LessThanThreshold",
                "Dimensions" :
                [ {
                    "Name" : "InstanceId",
                    "Value" : { "Ref" : "RdCbFileServerInstance" }
                } ],
                "EvaluationPeriods" : "5",
                "MetricName" : "LogicalDiskPercentFreeSpace_D",
                "Namespace" : "AWS/EC2",
                "Period" : "60",
                "Statistic" : "Average",
                "Threshold" : "20"
            }
        }
    },
    "Outputs" :
    {
        "RdcbEc2InstanceId" :
        {
            "Description" : "Instance ID of the RDCB File Server",
            "Value" : { "Ref" : "RdCbFileServerInstance" }
        },
        "RdcbEc2InstanceIp" :
        {
            "Description" : "IP address of the RDCB File Server",
            "Value" : { "Fn::GetAtt" : [ "RdCbFileServerInstance", "PrivateIp" ] }
        },
        "SnsArn" :
        {
            "Description" : "ARN for SNS topic",
            "Value" : { "Ref" : "SnsTopic" }
        }
    }
}
