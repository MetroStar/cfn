{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "This templates deploys Guacamole (Guac) instances in an AutoScale Group behind an ALB",
    "Parameters" :
    {
        "KeyPairName" :
        {
            "Description" : "Public/private key pairs allow you to securely connect to your instance after it launches",
            "Type" : "AWS::EC2::KeyPair::KeyName"
        },
        "AmiId" :
        {
            "Description" : "(Optional) AMI ID -- will supersede Lambda-based AMI lookup using AmiNameSearchString",
            "Type" : "String",
            "Default" : ""
        },
        "AmiNameSearchString" :
        {
            "Description" : "Search pattern to match against an AMI Name",
            "Type" : "String",
            "Default" : "amzn-ami-hvm-2017.03*.2017*-x86_64-gp2"
        },
        "InstanceType" :
        {
            "Description" : "Amazon EC2 instance type for the Guacamole Instances",
            "Type" : "String",
            "Default" : "t2.micro",
            "AllowedValues" :
            [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "t2.xlarge",
                "c4.large",
                "c4.xlarge",
                "m4.large",
                "m4.xlarge",
                "r3.large",
                "r3.xlarge"
            ]
        },
        "ForceUpdateToggle" :
        {
            "Description" : "A/B toggle that forces a change to a LaunchConfig property, triggering the AutoScale Update Policy",
            "Type" : "String",
            "Default" : "A",
            "AllowedValues" :
            [
                "A",
                "B"
            ]
        },
        "DesiredCapacity" :
        {
            "Description" : "The number of instances the autoscale group will spin up initially",
            "Type" : "String",
            "MinLength" : "1",
            "Default" : "1"
        },
        "MinCapacity" :
        {
            "Description" : "The minimum number of instances for the autoscale group",
            "Type" : "String",
            "MinLength" : "1",
            "Default" : "1"
        },
        "MaxCapacity" :
        {
            "Description" : "The maximum number of instances for the autoscale group",
            "Type" : "String",
            "MinLength" : "1",
            "Default" : "2"
        },
        "ScaleUpSchedule" :
        {
            "Description" : "(Optional) Scheduled Action in cron-format (UTC) to scale up to the Desired Capacity; ignored if empty or ScaleDownSchedule is unset (E.g. \"0 10 * * Mon-Fri\")",
            "Type" : "String",
            "Default" : ""
        },
        "ScaleDownSchedule" :
        {
            "Description" : "(Optional) Scheduled Action in cron-format (UTC) to scale down the number of instances; ignored if empty or ScaleUpSchedule is unset (E.g. \"0 0 * * *\")",
            "Type" : "String",
            "Default" : ""
        },
        "ScaleDownDesiredCapacity" :
        {
            "Description" : "(Optional) Desired number of instances during the Scale Down Scheduled Action; ignored if ScaleDownSchedule is unset",
            "Type" : "Number",
            "Default" : "1"
        },
        "LdapServer" :
        {
            "Description" : "Name of LDAP server Guacamole will authenticate against",
            "Type" : "String",
            "Default" : "ad.example.com",
            "MinLength" : "1"
        },
        "LdapDN" :
        {
            "Description" : "Distinguished Name (DN) of the LDAP directory",
            "Type" : "String",
            "Default" : "DC=ad,DC=example,DC=com",
            "MinLength" : "1"
        },
        "GuacVersion" :
        {
            "Description" : "Version of Guacamole to install",
            "Type" : "String",
            "Default" : "0.9.12-incubating",
            "MinLength" : "1"
        },
        "URL1" :
        {
            "Description" : "First custom URL/link to display on the Guac Login page",
            "Type" : "String",
            "Default" : "https://accounts.example.com"
        },
        "URLText1" :
        {
            "Description" : "Text/Label to display for the First custom URL/link displayed on the Guac Login page",
            "Type" : "String",
            "Default" : "Account Management"
        },
        "URL2" :
        {
            "Description" : "Second custom URL/link to display on the Guac Login page",
            "Type" : "String",
            "Default" : "https://redmine.example.com"
        },
        "URLText2" :
        {
            "Description" : "Text/Label to display for the Second custom URL/link displayed on the Guac Login page",
            "Type" : "String",
            "Default" : "Example Redmine"
        },
        "BrandText" :
        {
            "Description" : "Text/Label to display branding for the Guac Login page",
            "Type" : "String",
            "Default" : ""
        },
        "PrivateSubnetIDs" :
        {
            "Description" : "List of Private Subnet IDs where the Guacamole instances will run",
            "Type" : "List<AWS::EC2::Subnet::Id>"
        },
        "PublicSubnetIDs" :
        {
            "Description" : "A list of Public subnet IDs to attach to the Application Load Balancer",
            "Type" : "List<AWS::EC2::Subnet::Id>"
        },
        "SslCertificateName" :
        {
            "Description" : "The name (for IAM) or identifier (for ACM) of the SSL certificate to associate with the ALB -- the cert must already exist in the service",
            "Type" : "String"
        },
        "SslCertificateService" :
        {
            "Description" : "The service hosting the SSL certificate",
            "Type" : "String",
            "Default" : "ACM",
            "AllowedValues" :
            [
                "ACM",
                "IAM"
            ]
        },
        "VPC" :
        {
            "Description" : "VPC ID",
            "Type" : "AWS::EC2::VPC::Id"
        }
    },
    "Conditions" :
    {
        "UseURL1" :
        {
            "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "URL1" }, "" ] } ]
        },
        "UseURLText1" :
        {
            "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "URLText1" }, "" ] } ]
        },
        "UseURL2" :
        {
            "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "URL2" }, "" ] } ]
        },
        "UseURLText2" :
        {
            "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "URLText2" }, "" ] } ]
        },
        "UseBrandText" :
        {
            "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "BrandText" }, "" ] } ]
        },
        "UseAmiLookup" :
        {
            "Fn::Equals" : [ { "Ref" : "AmiId" }, "" ]
        },
        "UseACM" :
        {
            "Fn::Equals" : [ { "Ref" : "SslCertificateService" }, "ACM" ]
        },
        "UseScheduledAction" :
        {
            "Fn::And" :
            [
                { "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "ScaleUpSchedule" }, "" ] } ] },
                { "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "ScaleDownSchedule" }, "" ] } ] }
            ]
        },
        "UseScalingPolicy" :
        {
            "Fn::Or" :
            [
                { "Fn::Equals" : [ { "Ref" : "ScaleUpSchedule" }, "" ] },
                { "Fn::Equals" : [ { "Ref" : "ScaleDownSchedule" }, "" ] }
            ]
        }
    },
    "Mappings" :
    {
        "InstanceTypeMap" :
        {
            "t2.micro" :
            {
                "HasInstanceVolume" : "false",
                "SupportsEbsOptimized" : "false"
            },
            "t2.small" :
            {
                "HasInstanceVolume" : "false",
                "SupportsEbsOptimized" : "false"
            },
            "t2.medium" :
            {
                "HasInstanceVolume" : "false",
                "SupportsEbsOptimized" : "false"
            },
            "t2.large" :
            {
                "HasInstanceVolume" : "false",
                "SupportsEbsOptimized" : "false"
            },
            "t2.xlarge" :
            {
                "HasInstanceVolume" : "false",
                "SupportsEbsOptimized" : "false"
            },
            "c4.large" :
            {
                "HasInstanceVolume" : "false",
                "SupportsEbsOptimized" : "true"
            },
            "c4.xlarge" :
            {
                "HasInstanceVolume" : "false",
                "SupportsEbsOptimized" : "true"
            },
            "m4.large" :
            {
                "HasInstanceVolume" : "false",
                "SupportsEbsOptimized" : "true"
            },
            "m4.xlarge" :
            {
                "HasInstanceVolume" : "false",
                "SupportsEbsOptimized" : "true"
            },
            "r3.large" :
            {
                "HasInstanceVolume" : "true",
                "SupportsEbsOptimized" : "true"
            },
            "r3.xlarge" :
            {
                "HasInstanceVolume" : "true",
                "SupportsEbsOptimized" : "true"
            }
        }
    },
    "Resources" :
    {
        "AmiIdLookup" :
        {
            "Type" : "Custom::AmiIdLookup",
            "Condition" : "UseAmiLookup",
            "Properties" :
            {
                "ServiceToken" :
                { "Fn::Join" : [ ":", [
                    "arn:aws:lambda",
                    { "Ref" : "AWS::Region" },
                    { "Ref" : "AWS::AccountId" },
                    "function:cfn-look-up-ami-ids"
                ]]},
                "Region" : { "Ref" : "AWS::Region" },
                "AmiNameSearchString" : { "Ref" : "AmiNameSearchString" },
                "ForceUpdateToggle" : { "Ref" : "ForceUpdateToggle" }
            }
        },
        "Ec2IamInstanceProfile" :
        {
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties" :
            {
                "Path" : "/",
                "Roles" : [ { "Ref" : "Ec2IamRole" } ]
            }
        },
        "Ec2IamRole" :
        {
            "Type" : "AWS::IAM::Role",
            "Properties" :
            {
                "AssumeRolePolicyDocument" :
                {
                   "Version" : "2012-10-17",
                   "Statement" :
                   [ {
                      "Effect" : "Allow",
                      "Principal" :
                      {
                         "Service" : [ "ec2.amazonaws.com" ]
                      },
                      "Action" : [ "sts:AssumeRole" ]
                   } ]
                },
                "Path" : "/"
            }
        },
        "Ec2IamRolePolicy" :
        {
            "Type" : "AWS::IAM::Policy",
            "Properties" :
            {
                "PolicyName" :
                { "Fn::Join" : [ "", [
                    "ra-guac-",
                    { "Ref" : "AWS::StackName" }
                ]]},
                "PolicyDocument" :
                {
                    "Version" : "2012-10-17",
                    "Statement" :
                    [
                        {
                            "Effect" : "Allow",
                            "Action" :
                            [
                                "ssm:DescribeAssociation",
                                "ssm:GetDeployablePatchSnapshotForInstance",
                                "ssm:GetDocument",
                                "ssm:ListAssociations",
                                "ssm:ListInstanceAssociations",
                                "ssm:PutInventory",
                                "ssm:UpdateAssociationStatus",
                                "ssm:UpdateInstanceAssociationStatus",
                                "ssm:UpdateInstanceInformation"
                            ],
                            "Resource" : "*"
                        },
                        {
                            "Effect" : "Allow",
                            "Action" :
                            [
                                "ec2messages:AcknowledgeMessage",
                                "ec2messages:DeleteMessage",
                                "ec2messages:FailMessage",
                                "ec2messages:GetEndpoint",
                                "ec2messages:GetMessages",
                                "ec2messages:SendReply"
                            ],
                            "Resource" : "*"
                        },
                        {
                            "Effect" : "Allow",
                            "Action" :
                            [
                                "cloudwatch:PutMetricData"
                            ],
                            "Resource" : "*"
                        },
                        {
                            "Effect" : "Allow",
                            "Action" :
                            [
                                "ec2:DescribeInstanceStatus"
                            ],
                            "Resource" : "*"
                        },
                        {
                            "Effect" : "Allow",
                            "Action" :
                            [
                                "ds:CreateComputer",
                                "ds:DescribeDirectories"
                            ],
                            "Resource" : "*"
                        },
                        {
                            "Effect" : "Allow",
                            "Action" :
                            [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:DescribeLogGroups",
                                "logs:DescribeLogStreams",
                                "logs:PutLogEvents"
                            ],
                            "Resource" : "*"
                        },
                        {
                            "Effect" : "Allow",
                            "Action" :
                            [
                                "s3:GetObject"
                            ],
                            "Resource" : "arn:aws:s3:::amazon-ssm-*"
                        },
                        {
                            "Effect" : "Allow",
                            "Action" :
                            [
                                "s3:ListBucket"
                            ],
                            "Resource" : "arn:aws:s3:::amazon-ssm-packages-*"
                        }
                    ]
                },
                "Roles" : [ { "Ref" : "Ec2IamRole" } ]
            }
        },
        "SsmAssociationUpdateAgent" :
        {
            "Type" : "AWS::SSM::Association",
            "Properties" :
            {
                "Name" : "AWS-UpdateSSMAgent",
                "ScheduleExpression" : "rate(30 minutes)",
                "Targets" :
                [ {
                    "Key" : "tag:aws:cloudformation:stack-id",
                    "Values" : [ { "Ref" : "AWS::StackId" } ]
                } ]
            }
        },
        "SsmAssociationInstallPatches" :
        {
            "Type" : "AWS::SSM::Association",
            "Properties" :
            {
                "Name" : "AWS-RunPatchBaseline",
                "Parameters" :
                {
                    "Operation" : [ "Install" ]
                },
                "ScheduleExpression" : "cron(0 6 ? * WED *)",
                "Targets" :
                [ {
                    "Key" : "tag:aws:cloudformation:stack-id",
                    "Values" : [ { "Ref" : "AWS::StackId" } ]
                } ]
            }
        },
        "Ec2SecurityGroup" :
        {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" :
            {
                "GroupDescription" : "Enable Guacamole remote access",
                "VpcId" : { "Ref" : "VPC" },
                "Tags" :
                [
                    {
                        "Key" : "Name",
                        "Value" :
                        { "Fn::Join" : ["", [
                            "ra-guac-ec2-",
                            { "Ref" : "AWS::StackName" }
                        ]]}
                    }
                ]
            }
        },
        "AlbToGuacIngressTcp80" :
        {
            "Type" : "AWS::EC2::SecurityGroupIngress",
            "Properties" :
            {
                "GroupId" :  { "Ref" : "Ec2SecurityGroup" },
                "IpProtocol" : "tcp",
                "FromPort" : "8080",
                "ToPort" : "8080",
                "SourceSecurityGroupId" : { "Ref" : "AlbSecurityGroup" }
            }
        },
        "AlbSecurityGroup" :
        {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" :
            {
                "GroupDescription" : "Enable Guacamole remote access from the Internet",
                "VpcId" : { "Ref" : "VPC" },
                "Tags" :
                [
                    {
                        "Key" : "Name",
                        "Value" :
                        { "Fn::Join" : ["", [
                            "ra-guac-alb-",
                            { "Ref" : "AWS::StackName" }
                        ]]}
                    }
                ]
            }
        },
        "PublicToAlbIngressTcp443" :
        {
            "Type" : "AWS::EC2::SecurityGroupIngress",
            "Properties" :
            {
                "GroupId" :  { "Ref" : "AlbSecurityGroup" },
                "IpProtocol" : "tcp",
                "FromPort" : "443",
                "ToPort" : "443",
                "CidrIp" : "0.0.0.0/0"
            }
        },
        "AlbToGuacEgressTcp80" :
        {
            "Type" : "AWS::EC2::SecurityGroupEgress",
            "Properties" :
            {
                "GroupId" :  { "Ref" : "AlbSecurityGroup" },
                "IpProtocol" : "tcp",
                "FromPort" : "8080",
                "ToPort" : "8080",
                "DestinationSecurityGroupId" : { "Ref" : "Ec2SecurityGroup" }
            }
        },
        "ScaleUpScheduledAction" :
        {
            "Type" : "AWS::AutoScaling::ScheduledAction",
            "Condition" : "UseScheduledAction",
            "Properties" :
            {
                "AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
                "DesiredCapacity" : { "Ref" : "DesiredCapacity" },
                "Recurrence" : { "Ref" : "ScaleUpSchedule" }
            }
        },
        "ScaleDownScheduledAction" :
        {
            "Type" : "AWS::AutoScaling::ScheduledAction",
            "Condition" : "UseScheduledAction",
            "Properties" :
            {
                "AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
                "DesiredCapacity" : { "Ref" : "ScaleDownDesiredCapacity" },
                "Recurrence" : { "Ref" : "ScaleDownSchedule" }
            }
        },
        "ScaleUpPolicy" :
        {
            "Type" : "AWS::AutoScaling::ScalingPolicy",
            "Condition" : "UseScalingPolicy",
            "Properties" :
            {
                "AdjustmentType" : "ChangeInCapacity",
                "AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
                "Cooldown" : "60",
                "ScalingAdjustment" : "1"
            }
        },
        "ScaleDownPolicy" :
        {
            "Type" : "AWS::AutoScaling::ScalingPolicy",
            "Condition" : "UseScalingPolicy",
            "Properties" :
            {
                "AdjustmentType" : "ChangeInCapacity",
                "AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
                "Cooldown" : "60",
                "ScalingAdjustment" : "-1"
            }
        },
        "CPUAlarmLow" :
        {
            "Type" : "AWS::CloudWatch::Alarm",
            "Condition" : "UseScalingPolicy",
            "Properties" :
            {
                "EvaluationPeriods" : "10",
                "Statistic" : "Average",
                "Threshold" : "10",
                "AlarmDescription" : "Scale-down if CPU < 10% for 10 minutes",
                "Period" : "60",
                "AlarmActions" : [ { "Ref" : "ScaleDownPolicy" } ],
                "Namespace" : "AWS/EC2",
                "Dimensions" :
                [{
                   "Name" : "AutoScalingGroupName",
                   "Value" : { "Ref" : "AutoScalingGroup" }
                }],
                "ComparisonOperator" : "LessThanThreshold",
                "MetricName" : "CPUUtilization"
            }
        },
        "CPUAlarmHigh" :
        {
            "Type" : "AWS::CloudWatch::Alarm",
            "Condition" : "UseScalingPolicy",
            "Properties" :
            {
                "EvaluationPeriods" : "5",
                "Statistic" : "Average",
                "Threshold" : "30",
                "AlarmDescription" : "Scale-up if CPU > 30% for 5 minutes or metric disappears indicating instance is down",
                "Period" : "60",
                "AlarmActions" : [ { "Ref" : "ScaleUpPolicy" } ],
                "Namespace" : "AWS/EC2",
                "Dimensions" :
                [{
                   "Name" : "AutoScalingGroupName",
                   "Value" : { "Ref" : "AutoScalingGroup" }
                }],
                "ComparisonOperator" : "GreaterThanThreshold",
                "MetricName" : "CPUUtilization"
            }
        },
        "ALB" :
        {
            "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties" :
            {
                "Scheme" : "internet-facing",
                "SecurityGroups" : [ { "Ref" : "AlbSecurityGroup" } ],
                "Subnets" : { "Ref" : "PublicSubnetIDs" },
                "Tags" :
                [ {
                    "Key" : "Name",
                    "Value" : { "Ref" : "AWS::StackName" }
                } ]
            }
        },
        "Listener" :
        {
            "Type" : "AWS::ElasticLoadBalancingV2::Listener",
            "Properties" :
            {
                "DefaultActions" :
                [{
                    "Type" : "forward",
                    "TargetGroupArn" : { "Ref" : "ALBTargetGroup" }
                }],
                "LoadBalancerArn" : { "Ref" : "ALB" },
                "Port" : "443",
                "Protocol" : "HTTPS",
                "Certificates" :
                [{
                    "CertificateArn" :
                    {
                        "Fn::If" :
                        [
                            "UseACM",
                            { "Fn::Join" : [ ":", [
                                "arn:aws:acm",
                                { "Ref" : "AWS::Region" },
                                { "Ref" : "AWS::AccountId" },
                                { "Fn::Join" : [ "", [
                                    "certificate/",
                                    { "Ref" : "SslCertificateName" }
                                ] ] }
                            ] ] },
                            { "Fn::Join" : [ "", [
                                "arn:aws:iam::",
                                { "Ref" : "AWS::AccountId" },
                                ":server-certificate/",
                                { "Ref" : "SslCertificateName" }
                            ] ] }
                        ]
                    }
                }]
            }
        },
        "ALBTargetGroup" :
        {
            "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties" :
            {
                "HealthCheckIntervalSeconds" : "30",
                "HealthCheckPort" : "8080",
                "HealthCheckProtocol" : "HTTP",
                "HealthCheckTimeoutSeconds" : "10",
                "HealthyThresholdCount" : "5",
                "Port" : "8080",
                "Protocol" : "HTTP",
                "UnhealthyThresholdCount" : "10",
                "VpcId" : { "Ref" : "VPC" }
            }
        },
        "AutoScalingGroup" :
        {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "UpdatePolicy" :
            {
                "AutoScalingRollingUpdate" :
                {
                    "MinInstancesInService" : "1",
                    "MaxBatchSize" : "2",
                    "WaitOnResourceSignals" : "true",
                    "PauseTime" : "PT20M"
                },
                "AutoScalingScheduledAction" :
                {
                    "IgnoreUnmodifiedGroupSizeProperties" : "true"
                }
            },
            "CreationPolicy" :
            {
                "ResourceSignal" :
                {
                    "Count" : { "Ref" : "DesiredCapacity" },
                    "Timeout" : "PT20M"
                }
            },
            "Properties" :
            {
                "VPCZoneIdentifier" : { "Ref" : "PrivateSubnetIDs" },
                "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
                "TargetGroupARNs" : [ { "Ref" : "ALBTargetGroup" } ],
                "MinSize" : { "Ref" : "MinCapacity" },
                "MaxSize" : { "Ref" : "MaxCapacity" },
                "DesiredCapacity" : { "Ref" : "DesiredCapacity" },
                "HealthCheckGracePeriod" : "3600",
                "HealthCheckType" : "ELB",
                "MetricsCollection" : [ { "Granularity" : "1Minute" } ],
                "Tags" :
                [ {
                    "Key" : "Name",
                    "Value" : { "Ref" : "AWS::StackName" },
                    "PropagateAtLaunch" : "true"
                } ]
            }
        },
        "LaunchConfig" :
        {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Metadata" :
            {
                "AWS::CloudFormation::Init" :
                {
                    "configSets" :
                    {
                        "config" :
                        [
                            "setup",
                            "make-guac",
                            "finalize"
                        ],
                        "update" :
                        [
                            "setup",
                            "make-guac",
                            "finalize"
                        ]
                    },
                    "setup" :
                    {
                        "files" :
                        {
                            "/etc/cfn/cfn-hup.conf" :
                            {
                                "content" :
                                { "Fn::Join" : ["", [
                                    "[main]\n",
                                    "stack=", { "Ref" : "AWS::StackId" }, "\n",
                                    "region=", { "Ref" : "AWS::Region" }, "\n",
                                    "interval=1", "\n",
                                    "verbose=true", "\n"
                                ]]},
                                "mode"    : "000400",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf" :
                            {
                                "content" :
                                { "Fn::Join" : ["", [
                                    "[cfn-auto-reloader-hook]\n",
                                    "triggers=post.update\n",
                                    "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                                    "action=/opt/aws/bin/cfn-init -v -c update ",
                                    "         --stack ", { "Ref" : "AWS::StackName" },
                                    "         --resource LaunchConfig ",
                                    "         --region ", { "Ref" : "AWS::Region" }, "\n",
                                    "runas=root\n"
                                ]]},
                                "mode"    : "000400",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/etc/cfn/scripts/make-guac.sh" :
                            {
                                "source" : "https://raw.githubusercontent.com/plus3it/cfn/master/scripts/make-guac.sh",
                                "mode"    : "000700",
                                "owner"   : "root",
                                "group"   : "root"
                            }
                        },
                        "commands" :
                        {
                            "10-yum-update" :
                            {
                                "command" : "yum -y update"
                            }
                        },
                        "services" :
                        {
                            "sysvinit" :
                            {
                                "cfn-hup" :
                                {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files" :
                                    [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "make-guac" :
                    {
                        "commands" :
                        {
                            "10-make-guac" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    "/etc/cfn/scripts/make-guac.sh",
                                    " -H ",
                                    { "Ref" : "LdapServer" },
                                    " -D ",
                                    { "Ref" : "LdapDN" },
                                    " -v ",
                                    { "Ref" : "GuacVersion" },
                                    {
                                        "Fn::If" :
                                        [
                                            "UseURL1",
                                            { "Fn::Join" : [ "", [
                                                " -L \"",
                                                { "Ref" : "URL1" },
                                                "\""
                                            ]]},
                                            ""
                                        ]
                                    },
                                    {
                                        "Fn::If" :
                                        [
                                            "UseURLText1",
                                            { "Fn::Join" : [ "", [
                                                " -T \"",
                                                { "Ref" : "URLText1" },
                                                "\""
                                            ]]},
                                            ""
                                        ]
                                    },
                                    {
                                        "Fn::If" :
                                        [
                                            "UseURL2",
                                            { "Fn::Join" : [ "", [
                                                " -l \"",
                                                { "Ref" : "URL2" },
                                                "\""
                                            ]]},
                                            ""
                                        ]
                                    },
                                    {
                                        "Fn::If" :
                                        [
                                            "UseURLText2",
                                            { "Fn::Join" : [ "", [
                                                " -t \"",
                                                { "Ref" : "URLText2" },
                                                "\""
                                            ]]},
                                            ""
                                        ]
                                    },
                                    {
                                        "Fn::If" :
                                        [
                                            "UseBrandText",
                                            { "Fn::Join" : [ "", [
                                                " -B \"",
                                                { "Ref" : "BrandText" },
                                                "\""
                                            ]]},
                                            ""
                                        ]
                                    }
                                ]]}
                            }
                        }
                    },
                    "finalize" :
                    {
                        "commands" :
                        {
                            "10-signal-success" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    "/opt/aws/bin/cfn-signal -e 0 ",
                                    "   --stack ", { "Ref" : "AWS::StackName" },
                                    "   --resource AutoScalingGroup ",
                                    "   --region ", { "Ref" : "AWS::Region"}, "\n"
                                ]]},
                                "ignoreErrors" : "true"
                            }
                        }
                    }
                }
            },
            "Properties" :
            {
                "ImageId" :
                {
                    "Fn::If" :
                    [
                        "UseAmiLookup",
                        {"Fn::GetAtt" : [ "AmiIdLookup", "Id" ]},
                        {"Ref" : "AmiId"}
                    ]
                },
                "InstanceType" : { "Ref" : "InstanceType" },
                "KeyName" : { "Ref" : "KeyPairName" },
                "IamInstanceProfile" : { "Ref" : "Ec2IamInstanceProfile" },
                "EbsOptimized" :
                {
                    "Fn::FindInMap" :
                    [
                        "InstanceTypeMap",
                        { "Ref" : "InstanceType" },
                        "SupportsEbsOptimized"
                    ]
                },
                "BlockDeviceMappings" :
                [
                    {
                        "DeviceName" : "/dev/xvda",
                        "Ebs" :
                        {
                            "VolumeType" : "gp2",
                            "DeleteOnTermination" : "true"
                        }
                    }
                ],
                "SecurityGroups" :[ { "Ref" : "Ec2SecurityGroup" } ],
                "UserData" :
                { "Fn::Base64" : { "Fn::Join" : [ "", [
                    "#!/bin/bash -xe\n\n",

                    "# CFN LaunchConfig Update Toggle: ",
                    { "Ref" : "ForceUpdateToggle" },
                    "\n\n",

                    "# Get pip\n",
                    "curl --silent --show-error --retry 5 -L ",
                    "https://bootstrap.pypa.io/get-pip.py",
                    " | python", "\n\n",

                    "# Add pip to path\n",
                    "hash pip 2> /dev/null || ",
                    "PATH=\"${PATH}:/usr/local/bin\"", "\n\n",

                    "# Upgrade setuptools\n",
                    "pip install --upgrade setuptools\n\n",

                    "# Fix python urllib3 warnings\n",
                    "yum -y install gcc python-devel libffi-devel openssl-devel\n",
                    "pip install pyopenssl ndg-httpsclient pyasn1\n\n",

                    "# Get cfn utils\n",
                    "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n\n",

                    "# Remove gcc now that it is no longer needed\n",
                    "yum -y remove gcc --setopt=clean_requirements_on_remove=1\n\n",

                    "# Fixup cfn utils\n",
                    "INITDIR=$(find -L /opt/aws/apitools/cfn-init/init -name redhat ",
                    "2> /dev/null || echo /usr/init/redhat)\n",
                    "chmod 775 ${INITDIR}/cfn-hup\n",
                    "ln -f -s ${INITDIR}/cfn-hup /etc/rc.d/init.d/cfn-hup\n",
                    "chkconfig --add cfn-hup\n",
                    "chkconfig cfn-hup on\n",
                    "mkdir -p /opt/aws/bin\n",
                    "BINDIR=$(find -L /opt/aws/apitools/cfn-init -name bin ",
                    "2> /dev/null || echo /usr/bin)\n",
                    "for SCRIPT in cfn-elect-cmd-leader cfn-get-metadata cfn-hup ",
                    "cfn-init cfn-send-cmd-event cfn-send-cmd-result cfn-signal\n",
                    "do\n",
                    "    ln -s ${BINDIR}/${SCRIPT} /opt/aws/bin/${SCRIPT} 2> /dev/null || ",
                    "    echo Skipped symbolic link, /opt/aws/bin/${SCRIPT} already exists\n",
                    "done\n\n",

                    "# Add cfn-signal to path\n",
                    "hash cfn-signal 2> /dev/null || ",
                    "PATH=\"${PATH}:/usr/local/bin:/opt/aws/bin\"",
                    "\n\n",

                    "# Install ssm agent\n",
                    "yum -y install https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm\n\n",

                    "# Execute cfn-init\n",
                    "/opt/aws/bin/cfn-init -v -c config",
                    " --stack ", { "Ref" : "AWS::StackName" },
                    " --resource LaunchConfig ",
                    " --region ", { "Ref" : "AWS::Region" }, " ||",
                    " ( echo 'ERROR: cfn-init failed! Aborting!';",
                    " /opt/aws/bin/cfn-signal -e 1",
                    "  --stack ", { "Ref" : "AWS::StackName" },
                    "  --resource SystemPrepAutoScalingGroup",
                    "  --region ", { "Ref" : "AWS::Region"}, ";",
                    " exit 1",
                    " )\n\n"
                ]]}}
            }
        }
    },
    "Outputs" :
    {
        "LoadBalancerName" :
        {
            "Description" : "Name of the ALB",
            "Value" : { "Ref" : "ALB" }
        },
        "LoadBalancerDns" :
        {
            "Description" : "DNS name for the ALB",
            "Value" : { "Fn::GetAtt" : [ "ALB", "DNSName" ] }
        },
        "TargetGroupName" :
        {
            "Description" : "Name of the ALB Target Group",
            "Value" : { "Ref" : "ALBTargetGroup" }
        },
        "Ec2SecurityGroupId" :
        {
            "Value" : { "Ref" : "Ec2SecurityGroup" },
            "Description" : "Security Group ID for Guacamole instances"
        },
        "AlbSecurityGroupId" :
        {
            "Value" : { "Ref" : "AlbSecurityGroup" },
            "Description" : "Security Group ID for the Guacamole Application Load Balancer"
        }
    }
}
