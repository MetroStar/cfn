{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "This templates deploys Remote Desktop Gateway (RDGW) instances in an autoscale group behind an ELB, and joins them to a domain.",
    "Parameters" :
    {
        "KeyPairName" :
        {
            "Description" : "Public/private key pairs allow you to securely connect to your instance after it launches",
            "Type" : "AWS::EC2::KeyPair::KeyName"
        },
        "AmiId" :
        {
            "Description" : "(Optional) AMI ID -- will supersede Lambda-based AMI lookup using AmiNameSearchString",
            "Type" : "String",
            "Default" : ""
        },
        "ForceUpdateToggle" :
        {
            "Description" : "A/B toggle that forces a change to a LaunchConfig property, triggering the AutoScale Update Policy",
            "Type" : "String",
            "Default" : "A",
            "AllowedValues" :
            [
                "A",
                "B"
            ]
        },
        "AmiNameSearchString" :
        {
            "Description" : "Search pattern to match against an AMI Name",
            "Type" : "String",
            "Default" : "Windows_Server-2012-R2_RTM-English-64Bit-Base-2016*"
        },
        "InstanceType" :
        {
            "Description" : "Amazon EC2 instance type for the Remote Desktop Gateway Instance",
            "Type" : "String",
            "Default" : "t2.micro",
            "AllowedValues" :
            [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "t2.xlarge",
                "c4.large",
                "c4.xlarge",
                "m4.large",
                "m4.xlarge",
                "r3.large",
                "r3.xlarge"
            ]
        },
        "ElbName" :
        {
            "Description" : "Name of the RDGW Elastic Load Balancer",
            "Type" : "String",
            "MinLength" : "1"
        },
        "DesiredCapacity" :
        {
            "Description" : "The number of instances the autoscale group will spin up initially",
            "Type" : "String",
            "MinLength" : "1",
            "Default" : "1"
        },
        "MinCapacity" :
        {
            "Description" : "The minimum number of instances for the autoscale group",
            "Type" : "String",
            "MinLength" : "1",
            "Default" : "1"
        },
        "MaxCapacity" :
        {
            "Description" : "The maximum number of instances for the autoscale group",
            "Type" : "String",
            "MinLength" : "1",
            "Default" : "1"
        },
        "ScaleUpSchedule" :
        {
            "Description" : "(Optional) Scheduled Action in cron-format (UTC) to scale up to the Desired Capacity; ignored if empty or ScaleDownSchedule is unset (E.g. \"0 10 * * Mon-Fri\")",
            "Type" : "String",
            "Default" : ""
        },
        "ScaleDownSchedule" :
        {
            "Description" : "(Optional) Scheduled Action in cron-format (UTC) to scale down the number of instances; ignored if empty or ScaleUpSchedule is unset (E.g. \"0 0 * * *\")",
            "Type" : "String",
            "Default" : ""
        },
        "ScaleDownDesiredCapacity" :
        {
            "Description" : "(Optional) Desired number of instances during the Scale Down Scheduled Action; ignored if ScaleDownSchedule is unset",
            "Type" : "Number",
            "Default" : "1"
        },
        "RemoteAccessUserGroup" :
        {
            "Description" : "Domain group of users authorized to use the RDGW",
            "Type" : "String",
            "Default" : "Domain Admins",
            "MinLength" : "1"
        },
        "DomainJoinPassword" :
        {
            "Description" : "Password for the domain join user. Must be at least 8 characters containing letters, numbers and symbols",
            "Type" : "String",
            "MinLength" : "8",
            "MaxLength" : "32",
            "AllowedPattern" : "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
            "NoEcho" : "true",
            "Default" : "Password123"
        },
        "DomainJoinUser" :
        {
            "Description" : "User name for the account that will join the instance to the domain",
            "Type" : "String",
            "Default" : "StackAdmin",
            "MinLength" : "5",
            "MaxLength" : "25",
            "AllowedPattern" : "[a-zA-Z0-9_]*"
        },
        "DomainDNSName" :
        {
            "Description" : "Fully qualified domain name (FQDN) of the forest root domain e.g. example.com",
            "Type" : "String",
            "Default" : "example.com",
            "MinLength" : "3",
            "MaxLength" : "25",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "DomainNetBIOSName" :
        {
            "Description" : "NetBIOS name of the domain (e.g. EXAMPLE)",
            "Type" : "String",
            "Default" : "EXAMPLE",
            "MinLength" : "1",
            "MaxLength" : "15",
            "AllowedPattern" : "[a-zA-Z0-9]+"
        },
        "PrivateSubnetIDs" :
        {
            "Description" : "List of Private Subnet IDs where the RDGW instances will run.",
            "Type" : "List<AWS::EC2::Subnet::Id>"
        },
        "SecurityGroupIDs" :
        {
            "Description" : "List of Security Group IDs for RDGW instances",
            "Type" : "List<AWS::EC2::SecurityGroup::Id>"
        }
    },
    "Conditions" :
    {
        "UseAmiLookup" :
        {
            "Fn::Equals" : [ { "Ref" : "AmiId" }, "" ]
        },
        "UseScheduledAction" :
        {
            "Fn::And" :
            [
                { "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "ScaleUpSchedule" }, "" ] } ] },
                { "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "ScaleDownSchedule" }, "" ] } ] }
            ]
        }
    },
    "Mappings" :
    {
        "InstanceTypeMap" :
        {
            "t2.micro" :
            {
                "HasInstanceVolume" : "false",
                "SupportsEbsOptimized" : "false"
            },
            "t2.small" :
            {
                "HasInstanceVolume" : "false",
                "SupportsEbsOptimized" : "false"
            },
            "t2.medium" :
            {
                "HasInstanceVolume" : "false",
                "SupportsEbsOptimized" : "false"
            },
            "t2.large" :
            {
                "HasInstanceVolume" : "false",
                "SupportsEbsOptimized" : "false"
            },
            "t2.xlarge" :
            {
                "HasInstanceVolume" : "false",
                "SupportsEbsOptimized" : "false"
            },
            "c4.large" :
            {
                "HasInstanceVolume" : "false",
                "SupportsEbsOptimized" : "true"
            },
            "c4.xlarge" :
            {
                "HasInstanceVolume" : "false",
                "SupportsEbsOptimized" : "true"
            },
            "m4.large" :
            {
                "HasInstanceVolume" : "false",
                "SupportsEbsOptimized" : "true"
            },
            "m4.xlarge" :
            {
                "HasInstanceVolume" : "false",
                "SupportsEbsOptimized" : "true"
            },
            "r3.large" :
            {
                "HasInstanceVolume" : "true",
                "SupportsEbsOptimized" : "true"
            },
            "r3.xlarge" :
            {
                "HasInstanceVolume" : "true",
                "SupportsEbsOptimized" : "true"
            }
        }
    },
    "Resources" :
    {
        "AmiIdLookup" :
        {
            "Type" : "Custom::AmiIdLookup",
            "Condition" : "UseAmiLookup",
            "Properties" :
            {
                "ServiceToken" :
                { "Fn::Join" : [ ":", [
                    "arn:aws:lambda",
                    { "Ref" : "AWS::Region" },
                    { "Ref" : "AWS::AccountId" },
                    "function:cfn-look-up-ami-ids"
                ]]},
                "Region" : { "Ref" : "AWS::Region" },
                "AmiNameSearchString" : { "Ref" : "AmiNameSearchString" },
                "ForceUpdateToggle" : { "Ref" : "ForceUpdateToggle" }
            }
        },
        "ScaleUpScheduledAction" :
        {
            "Type" : "AWS::AutoScaling::ScheduledAction",
            "Condition" : "UseScheduledAction",
            "Properties" :
            {
                "AutoScalingGroupName" : { "Ref" : "RdgwAutoScalingGroup" },
                "DesiredCapacity" : { "Ref" : "DesiredCapacity" },
                "Recurrence" : { "Ref" : "ScaleUpSchedule" }
            }
        },
        "ScaleDownScheduledAction" :
        {
            "Type" : "AWS::AutoScaling::ScheduledAction",
            "Condition" : "UseScheduledAction",
            "Properties" :
            {
                "AutoScalingGroupName" : { "Ref" : "RdgwAutoScalingGroup" },
                "DesiredCapacity" : { "Ref" : "ScaleDownDesiredCapacity" },
                "Recurrence" : { "Ref" : "ScaleDownSchedule" }
            }
        },
        "RdgwAutoScalingGroup" :
        {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "CreationPolicy" :
            {
                "ResourceSignal" :
                {
                    "Count" : { "Ref" : "DesiredCapacity" },
                    "Timeout" : "PT40M"
                }
            },
            "UpdatePolicy" :
            {
                "AutoScalingRollingUpdate" :
                {
                    "MinInstancesInService" : "1",
                    "MaxBatchSize" : "2",
                    "WaitOnResourceSignals" : "true",
                    "PauseTime" : "PT40M",
                    "SuspendProcesses" : [ "ScheduledActions" ]
                },
                "AutoScalingScheduledAction" :
                {
                    "IgnoreUnmodifiedGroupSizeProperties" : "true"
                }
            },
            "Properties" :
            {
                "VPCZoneIdentifier" : { "Ref" : "PrivateSubnetIDs" },
                "LaunchConfigurationName" : { "Ref" : "RdgwLaunchConfig" },
                "LoadBalancerNames" : [ { "Ref" : "ElbName" } ],
                "MinSize" : { "Ref" : "MinCapacity" },
                "MaxSize" : { "Ref" : "MaxCapacity" },
                "DesiredCapacity" : { "Ref" : "DesiredCapacity" },
                "HealthCheckGracePeriod" : "3600",
                "HealthCheckType" : "ELB",
                "Tags" :
                [
                    {
                        "Key" : "Name",
                        "Value" : { "Fn::Join" : ["", [
                            "ra-rdgw-",
                            { "Ref" : "AWS::StackName" }
                        ]]},
                        "PropagateAtLaunch" : "true"
                    }
                ]
            }
        },
        "RdgwLaunchConfig" :
        {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Metadata" :
            {
                "AWS::CloudFormation::Init" :
                {
                    "configSets" :
                    {
                        "config" :
                        [
                            "setup",
                            "join",
                            "installRDS",
                            "finalize"
                        ],
                        "update" :
                        [
                            "setup",
                            "finalize"
                        ]
                    },
                    "setup" :
                    {
                        "files" :
                        {
                            "c:\\cfn\\cfn-hup.conf" :
                            {
                                "content" :
                                { "Fn::Join" : [ "", [
                                    "[main]\n",
                                    "stack=", { "Ref" : "AWS::StackName" },
                                    "\n",
                                    "region=", { "Ref" : "AWS::Region" },
                                    "\n"
                                ]]}
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" :
                            {
                                "content" :
                                { "Fn::Join" : [ "", [
                                    "[cfn-auto-reloader-hook]\n",
                                    "triggers=post.update\n",
                                    "path=Resources.RdgwLaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                                    "action=cfn-init.exe -v -c update",
                                    " --stack ", { "Ref" : "AWS::StackName" },
                                    " --resource RdgwLaunchConfig ",
                                    " --region ", { "Ref" : "AWS::Region"}, "\n"
                                ]]}
                            },
                            "c:\\cfn\\scripts\\configure-rdgw.ps1" :
                            {
                                "source" : "https://raw.githubusercontent.com/plus3it/cfn/master/scripts/configure-rdgw.ps1"
                            }
                        },
                        "services" :
                        {
                            "windows" :
                            {
                                "cfn-hup" :
                                {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files" :
                                    [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "join" :
                    {
                        "commands" :
                        {
                            "10-join-domain" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    "powershell.exe -Command \"",
                                    "Add-Computer -DomainName ",
                                    { "Ref" : "DomainDNSName" },
                                    " -Credential ",
                                    "(New-Object System.Management.Automation.PSCredential('",
                                    { "Ref" : "DomainNetBIOSName" },
                                    "\\",
                                    { "Ref" : "DomainJoinUser" },
                                    "',",
                                    "(ConvertTo-SecureString '",
                                    { "Ref" : "DomainJoinPassword" },
                                    "' -AsPlainText -Force))) ",
                                    " -Restart -Verbose\""
                                ]]},
                                "waitAfterCompletion" : "forever"
                            }
                        }
                    },
                    "installRDS" :
                    {
                        "commands" :
                        {
                            "10-install-rds" :
                            {
                                "command" : "powershell.exe \"Install-WindowsFeature RDS-Gateway,RSAT-RDS-Gateway -Verbose\"",
                                "waitAfterCompletion" : "0"
                            },
                            "20-configure-rdgw" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    "powershell.exe -ExecutionPolicy RemoteSigned",
                                    " C:\\cfn\\scripts\\configure-rdgw.ps1 ",
                                    " -DomainNetBiosName ", { "Ref" : "DomainNetBIOSName" },
                                    " -GroupName ",
                                    "'",
                                    { "Ref" : "RemoteAccessUserGroup" },
                                    "'",
                                    " -Verbose"
                                ]]},
                                "waitAfterCompletion" : "0"
                            }
                        }
                    },
                    "finalize" :
                    {
                        "commands" :
                        {
                            "10-signal-success" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    "cfn-signal.exe -e 0",
                                    " --stack ", { "Ref" : "AWS::StackName" },
                                    " --resource RdgwAutoScalingGroup ",
                                    " --region ", { "Ref" : "AWS::Region"}
                                ]]},
                                "ignoreErrors" : "true",
                                "waitAfterCompletion" : "0"
                            }
                        }
                    }
                }
            },
            "Properties" :
            {
                "ImageId" :
                {
                    "Fn::If" :
                    [
                        "UseAmiLookup",
                        {"Fn::GetAtt": [ "AmiIdLookup", "Id" ]},
                        {"Ref" : "AmiId"}
                    ]
                },
                "InstanceType" : { "Ref" : "InstanceType" },
                "KeyName" : { "Ref" : "KeyPairName" },
                "EbsOptimized" :
                {
                    "Fn::FindInMap" :
                    [
                        "InstanceTypeMap",
                        { "Ref" : "InstanceType" },
                        "SupportsEbsOptimized"
                    ]
                },
                "BlockDeviceMappings" :
                [
                    {
                        "DeviceName" : "/dev/sda1",
                        "Ebs" :
                        {
                            "VolumeSize" : "50",
                            "VolumeType" : "gp2",
                            "DeleteOnTermination" : "true"
                        }
                    }
                ],
                "SecurityGroups" : { "Ref" : "SecurityGroupIDs" },
                "UserData" :
                { "Fn::Base64" : { "Fn::Join" : [ "", [
                    "<script>\n",
                    "REM CFN LaunchConfig Update Toggle: ",
                    { "Ref" : "ForceUpdateToggle" },
                    "\n",
                    "cfn-init.exe -v -c config ",
                    "   --stack ", { "Ref" : "AWS::StackName" },
                    "   --resource RdgwLaunchConfig ",
                    "   --region ", { "Ref" : "AWS::Region"}, "\n",
                    "</script>\n"
                ]]}}
            }
        }
    }
}
